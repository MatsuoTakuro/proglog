package server

import (
	"context"
	"time"

	api "github.com/MatsuoTakuro/proglog/api/v1"
	"google.golang.org/grpc"
)

// grpcServer implements api.LogServer generated by copiling with grpc plugin
type grpcServer struct {
	api.UnimplementedLogServer
	*Config
}

var _ api.LogServer = (*grpcServer)(nil)

// Config is a config for a grpc server
type Config struct {
	CommitLog CommitLog // embedded interface. this reverses server dependencies on log implementations
}

// abstract log behavior as an interface
type CommitLog interface {
	Append(*api.Record) (uint64, error)
	Read(uint64) (*api.Record, error)
}

func NewGRPCServer(cfg *Config) (*grpc.Server, error) {
	gsrv := grpc.NewServer()
	srv, err := newGRPCServer(cfg)
	if err != nil {
		return nil, err
	}
	api.RegisterLogServer(gsrv, srv)

	return gsrv, nil
}

func newGRPCServer(cfg *Config) (srv *grpcServer, err error) {
	srv = &grpcServer{
		Config: cfg,
	}

	return srv, nil
}

func (s *grpcServer) Produce(ctx context.Context, req *api.ProduceRequest) (
	*api.ProduceResponse, error,
) {
	off, err := s.CommitLog.Append(req.Record)
	if err != nil {
		return nil, err
	}

	return &api.ProduceResponse{
		Offset: off,
	}, nil
}

func (s *grpcServer) Consume(ctx context.Context, req *api.ConsumeRequest) (
	*api.ConsumeResponse, error,
) {
	record, err := s.CommitLog.Read(req.Offset)
	if err != nil {
		return nil, err
	}

	return &api.ConsumeResponse{
		Record: record,
	}, nil
}

// ProduceStream produces record(s) as bi-directional streaming RPC
func (s *grpcServer) ProduceStream(
	stream api.Log_ProduceStreamServer,
) error {
	for {
		req, err := stream.Recv()
		if err != nil {
			return err
		}

		res, err := s.Produce(stream.Context(), req)
		if err != nil {
			return err
		}

		if err = stream.Send(res); err != nil {
			return err
		}
	}
}

// ConsumeStream comsumes record(s) as server side streaming RPC
func (s *grpcServer) ConsumeStream(
	req *api.ConsumeRequest,
	stream api.Log_ConsumeStreamServer,
) error {
	for {
		select {
		// notified that streaming is canceled or stopped from a client
		case <-stream.Context().Done():
			return nil

		default:
			// consume a record with a given offset
			res, err := s.Consume(stream.Context(), req)
			switch err.(type) {
			// consume a record sucessfully and will send it back to a client
			case nil:

			// in case of completing consumption of records with a given offset,
			// wait for new entry of a record.
			case api.ErrOffsetOutOfRange:
				time.Sleep(time.Second)
				continue

			// fails to consume a record
			default:
				return err
			}

			// send a record in streaming
			if err = stream.Send(res); err != nil {
				return err
			}

			// try to consume the next record
			req.Offset++
		}
	}
}
